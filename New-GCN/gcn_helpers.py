import tensorflow as tf
import numpy as np


def sparse_dropout(input_tensor, prob, noise_shape):
    """
    Applies dropout to sparse tensors.

    :param tf.SparseTensor input_tensor:
        The input sparse tensor.
    :param float prob:
        The probability that each element is dropped.
    :param noise_shape: 1D tensor
        A 1D tensor of type int representing the shape for randomly generated keep/drop flags.

    :return: tf.SparseTensor
        A sparse tensor with dropout applied.

    Notes:
        This function applies dropout to a sparse tensor `input_tensor`. It randomly drops elements based on the provided
        `prob` probability and `noise_shape`.

        The `random_tensor` is generated by adding `1 - prob` to uniformly distributed random values in the range [0, 1)
        with the shape defined by `noise_shape`. Elements in the resulting `random_tensor` that are greater than or equal
        to 1.0 are kept, and others are dropped.

        The `dropout_mask` is created by casting the floor of `random_tensor` to boolean values.

        The `pre_out` sparse tensor is obtained by retaining elements in the input sparse tensor `x` based on the
        `dropout_mask`.

        The final output is obtained by scaling `pre_out` with `(1. / keep_prob)`.

    :Example:
    >>> input_tensor = tf.SparseTensor(...)
    >>> keep_prob = 0.8
    >>> noise_shape = tf.constant([10])
    >>> result = sparse_dropout(input_tensor, keep_prob, noise_shape)
    """
    rand_tensor = 1 - prob + tf.random.uniform(shape=noise_shape)
    dropout_mask = tf.cast(tf.floor(rand_tensor), dtype=tf.bool)
    out = tf.sparse.retain(input_tensor, dropout_mask)
    return out * (1.0 / (1 - prob))


def multiply_tensors(x, y, sparse=False):
    """
    Perform matrix multiplication between two tensors, either sparse or dense.

    :param x: First input tensor. Can be a dense tensor (tf.Tensor) or a sparse tensor (tf.SparseTensor).
    :param y: Second input tensor. Can be a dense tensor (tf.Tensor) or a sparse tensor (tf.SparseTensor).
    :param sparse: Boolean flag indicating whether to perform sparse dense matrix multiplication. Defaults to False.

    :return: Resultant tensor after matrix multiplication.

    Notes:
        This function performs matrix multiplication between two tensors, `x` and `y`.
        If `sparse` is True, the operation is performed using sparse dense tensor multiplication.
        Otherwise, regular matrix multiplication is employed.
    """

    if sparse:
        res = tf.sparse.sparse_dense_matmul(x, y)
    else:
        res = tf.matmul(x, y)
    return res


def gb_tensor(shape, name=None):
    """Glorot & Bengio (AISTATS 2010) init."""
    init_range = np.sqrt(6.0 / (shape[0] + shape[1]))
    initial = tf.random.uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)
    return tf.Variable(initial, name=name)


def zeros_tensor(shape, name=None):
    """All zeros."""
    return tf.Variable(tf.zeros(shape, dtype=tf.float32), name=name)


def ones_tensor(shape, name=None):
    """All ones."""
    return tf.Variable(tf.ones(shape, dtype=tf.float32), name=name)

